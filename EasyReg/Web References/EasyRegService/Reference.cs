//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34003.
// 
#pragma warning disable 1591

namespace EasyReg.EasyRegService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EasyRegServiceSoap", Namespace="http://tempuri.org/")]
    public partial class EasyRegService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback doSelectLoginTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback doLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback doSelectUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback doSelectVehicleTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback doSelectVehicleCapacityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoEnableDisablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback doVehicleRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback doCalculateLicenseFeeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EasyRegService() {
            this.Url = global::EasyReg.Properties.Settings.Default.EasyReg_EasyRegService_EasyRegService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event doSelectLoginTypesCompletedEventHandler doSelectLoginTypesCompleted;
        
        /// <remarks/>
        public event doLoginCompletedEventHandler doLoginCompleted;
        
        /// <remarks/>
        public event doSelectUsersCompletedEventHandler doSelectUsersCompleted;
        
        /// <remarks/>
        public event doSelectVehicleTypesCompletedEventHandler doSelectVehicleTypesCompleted;
        
        /// <remarks/>
        public event doSelectVehicleCapacityCompletedEventHandler doSelectVehicleCapacityCompleted;
        
        /// <remarks/>
        public event DoEnableDisablesCompletedEventHandler DoEnableDisablesCompleted;
        
        /// <remarks/>
        public event CreateUsersCompletedEventHandler CreateUsersCompleted;
        
        /// <remarks/>
        public event doVehicleRegistrationCompletedEventHandler doVehicleRegistrationCompleted;
        
        /// <remarks/>
        public event doCalculateLicenseFeeCompletedEventHandler doCalculateLicenseFeeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSelectLoginTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doSelectLoginTypes() {
            object[] results = this.Invoke("doSelectLoginTypes", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doSelectLoginTypesAsync() {
            this.doSelectLoginTypesAsync(null);
        }
        
        /// <remarks/>
        public void doSelectLoginTypesAsync(object userState) {
            if ((this.doSelectLoginTypesOperationCompleted == null)) {
                this.doSelectLoginTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSelectLoginTypesOperationCompleted);
            }
            this.InvokeAsync("doSelectLoginTypes", new object[0], this.doSelectLoginTypesOperationCompleted, userState);
        }
        
        private void OndoSelectLoginTypesOperationCompleted(object arg) {
            if ((this.doSelectLoginTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSelectLoginTypesCompleted(this, new doSelectLoginTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doLogin(string UserId, string Password, int LogintypeId) {
            object[] results = this.Invoke("doLogin", new object[] {
                        UserId,
                        Password,
                        LogintypeId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doLoginAsync(string UserId, string Password, int LogintypeId) {
            this.doLoginAsync(UserId, Password, LogintypeId, null);
        }
        
        /// <remarks/>
        public void doLoginAsync(string UserId, string Password, int LogintypeId, object userState) {
            if ((this.doLoginOperationCompleted == null)) {
                this.doLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoLoginOperationCompleted);
            }
            this.InvokeAsync("doLogin", new object[] {
                        UserId,
                        Password,
                        LogintypeId}, this.doLoginOperationCompleted, userState);
        }
        
        private void OndoLoginOperationCompleted(object arg) {
            if ((this.doLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doLoginCompleted(this, new doLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSelectUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doSelectUsers() {
            object[] results = this.Invoke("doSelectUsers", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doSelectUsersAsync() {
            this.doSelectUsersAsync(null);
        }
        
        /// <remarks/>
        public void doSelectUsersAsync(object userState) {
            if ((this.doSelectUsersOperationCompleted == null)) {
                this.doSelectUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSelectUsersOperationCompleted);
            }
            this.InvokeAsync("doSelectUsers", new object[0], this.doSelectUsersOperationCompleted, userState);
        }
        
        private void OndoSelectUsersOperationCompleted(object arg) {
            if ((this.doSelectUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSelectUsersCompleted(this, new doSelectUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSelectVehicleTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doSelectVehicleTypes() {
            object[] results = this.Invoke("doSelectVehicleTypes", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doSelectVehicleTypesAsync() {
            this.doSelectVehicleTypesAsync(null);
        }
        
        /// <remarks/>
        public void doSelectVehicleTypesAsync(object userState) {
            if ((this.doSelectVehicleTypesOperationCompleted == null)) {
                this.doSelectVehicleTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSelectVehicleTypesOperationCompleted);
            }
            this.InvokeAsync("doSelectVehicleTypes", new object[0], this.doSelectVehicleTypesOperationCompleted, userState);
        }
        
        private void OndoSelectVehicleTypesOperationCompleted(object arg) {
            if ((this.doSelectVehicleTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSelectVehicleTypesCompleted(this, new doSelectVehicleTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSelectVehicleCapacity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doSelectVehicleCapacity() {
            object[] results = this.Invoke("doSelectVehicleCapacity", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doSelectVehicleCapacityAsync() {
            this.doSelectVehicleCapacityAsync(null);
        }
        
        /// <remarks/>
        public void doSelectVehicleCapacityAsync(object userState) {
            if ((this.doSelectVehicleCapacityOperationCompleted == null)) {
                this.doSelectVehicleCapacityOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSelectVehicleCapacityOperationCompleted);
            }
            this.InvokeAsync("doSelectVehicleCapacity", new object[0], this.doSelectVehicleCapacityOperationCompleted, userState);
        }
        
        private void OndoSelectVehicleCapacityOperationCompleted(object arg) {
            if ((this.doSelectVehicleCapacityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSelectVehicleCapacityCompleted(this, new doSelectVehicleCapacityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoEnableDisables", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable DoEnableDisables(object datatable, object logintypeid) {
            object[] results = this.Invoke("DoEnableDisables", new object[] {
                        datatable,
                        logintypeid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void DoEnableDisablesAsync(object datatable, object logintypeid) {
            this.DoEnableDisablesAsync(datatable, logintypeid, null);
        }
        
        /// <remarks/>
        public void DoEnableDisablesAsync(object datatable, object logintypeid, object userState) {
            if ((this.DoEnableDisablesOperationCompleted == null)) {
                this.DoEnableDisablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoEnableDisablesOperationCompleted);
            }
            this.InvokeAsync("DoEnableDisables", new object[] {
                        datatable,
                        logintypeid}, this.DoEnableDisablesOperationCompleted, userState);
        }
        
        private void OnDoEnableDisablesOperationCompleted(object arg) {
            if ((this.DoEnableDisablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoEnableDisablesCompleted(this, new DoEnableDisablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CreateUsers(object statelistid, object revenuelistid, object userid, object password, object logintypeid, object agentlistid, object name) {
            object[] results = this.Invoke("CreateUsers", new object[] {
                        statelistid,
                        revenuelistid,
                        userid,
                        password,
                        logintypeid,
                        agentlistid,
                        name});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUsersAsync(object statelistid, object revenuelistid, object userid, object password, object logintypeid, object agentlistid, object name) {
            this.CreateUsersAsync(statelistid, revenuelistid, userid, password, logintypeid, agentlistid, name, null);
        }
        
        /// <remarks/>
        public void CreateUsersAsync(object statelistid, object revenuelistid, object userid, object password, object logintypeid, object agentlistid, object name, object userState) {
            if ((this.CreateUsersOperationCompleted == null)) {
                this.CreateUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUsersOperationCompleted);
            }
            this.InvokeAsync("CreateUsers", new object[] {
                        statelistid,
                        revenuelistid,
                        userid,
                        password,
                        logintypeid,
                        agentlistid,
                        name}, this.CreateUsersOperationCompleted, userState);
        }
        
        private void OnCreateUsersOperationCompleted(object arg) {
            if ((this.CreateUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUsersCompleted(this, new CreateUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doVehicleRegistration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doVehicleRegistration(
                    object PlateNum, 
                    object ChasisNum, 
                    object EngineNum, 
                    object VehicleColour, 
                    object VehicleMake, 
                    object VehicleType, 
                    object VehicleCapacity, 
                    object placeofreg, 
                    object Othername, 
                    object Surname, 
                    object AptNum, 
                    object StreetName, 
                    object Town, 
                    object State, 
                    object Telephone, 
                    object Email) {
            object[] results = this.Invoke("doVehicleRegistration", new object[] {
                        PlateNum,
                        ChasisNum,
                        EngineNum,
                        VehicleColour,
                        VehicleMake,
                        VehicleType,
                        VehicleCapacity,
                        placeofreg,
                        Othername,
                        Surname,
                        AptNum,
                        StreetName,
                        Town,
                        State,
                        Telephone,
                        Email});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doVehicleRegistrationAsync(
                    object PlateNum, 
                    object ChasisNum, 
                    object EngineNum, 
                    object VehicleColour, 
                    object VehicleMake, 
                    object VehicleType, 
                    object VehicleCapacity, 
                    object placeofreg, 
                    object Othername, 
                    object Surname, 
                    object AptNum, 
                    object StreetName, 
                    object Town, 
                    object State, 
                    object Telephone, 
                    object Email) {
            this.doVehicleRegistrationAsync(PlateNum, ChasisNum, EngineNum, VehicleColour, VehicleMake, VehicleType, VehicleCapacity, placeofreg, Othername, Surname, AptNum, StreetName, Town, State, Telephone, Email, null);
        }
        
        /// <remarks/>
        public void doVehicleRegistrationAsync(
                    object PlateNum, 
                    object ChasisNum, 
                    object EngineNum, 
                    object VehicleColour, 
                    object VehicleMake, 
                    object VehicleType, 
                    object VehicleCapacity, 
                    object placeofreg, 
                    object Othername, 
                    object Surname, 
                    object AptNum, 
                    object StreetName, 
                    object Town, 
                    object State, 
                    object Telephone, 
                    object Email, 
                    object userState) {
            if ((this.doVehicleRegistrationOperationCompleted == null)) {
                this.doVehicleRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoVehicleRegistrationOperationCompleted);
            }
            this.InvokeAsync("doVehicleRegistration", new object[] {
                        PlateNum,
                        ChasisNum,
                        EngineNum,
                        VehicleColour,
                        VehicleMake,
                        VehicleType,
                        VehicleCapacity,
                        placeofreg,
                        Othername,
                        Surname,
                        AptNum,
                        StreetName,
                        Town,
                        State,
                        Telephone,
                        Email}, this.doVehicleRegistrationOperationCompleted, userState);
        }
        
        private void OndoVehicleRegistrationOperationCompleted(object arg) {
            if ((this.doVehicleRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doVehicleRegistrationCompleted(this, new doVehicleRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doCalculateLicenseFee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable doCalculateLicenseFee(object issuesdate, object expirydate, object platenumber) {
            object[] results = this.Invoke("doCalculateLicenseFee", new object[] {
                        issuesdate,
                        expirydate,
                        platenumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void doCalculateLicenseFeeAsync(object issuesdate, object expirydate, object platenumber) {
            this.doCalculateLicenseFeeAsync(issuesdate, expirydate, platenumber, null);
        }
        
        /// <remarks/>
        public void doCalculateLicenseFeeAsync(object issuesdate, object expirydate, object platenumber, object userState) {
            if ((this.doCalculateLicenseFeeOperationCompleted == null)) {
                this.doCalculateLicenseFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoCalculateLicenseFeeOperationCompleted);
            }
            this.InvokeAsync("doCalculateLicenseFee", new object[] {
                        issuesdate,
                        expirydate,
                        platenumber}, this.doCalculateLicenseFeeOperationCompleted, userState);
        }
        
        private void OndoCalculateLicenseFeeOperationCompleted(object arg) {
            if ((this.doCalculateLicenseFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doCalculateLicenseFeeCompleted(this, new doCalculateLicenseFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doSelectLoginTypesCompletedEventHandler(object sender, doSelectLoginTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSelectLoginTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSelectLoginTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doLoginCompletedEventHandler(object sender, doLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doSelectUsersCompletedEventHandler(object sender, doSelectUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSelectUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSelectUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doSelectVehicleTypesCompletedEventHandler(object sender, doSelectVehicleTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSelectVehicleTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSelectVehicleTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doSelectVehicleCapacityCompletedEventHandler(object sender, doSelectVehicleCapacityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSelectVehicleCapacityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSelectVehicleCapacityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DoEnableDisablesCompletedEventHandler(object sender, DoEnableDisablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoEnableDisablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoEnableDisablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateUsersCompletedEventHandler(object sender, CreateUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doVehicleRegistrationCompletedEventHandler(object sender, doVehicleRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doVehicleRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doVehicleRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void doCalculateLicenseFeeCompletedEventHandler(object sender, doCalculateLicenseFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doCalculateLicenseFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doCalculateLicenseFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591